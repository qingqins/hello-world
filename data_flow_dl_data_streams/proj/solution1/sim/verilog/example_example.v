// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example_example,hls_ip_2019_2_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-2,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.297000,HLS_SYN_LAT=24,HLS_SYN_TPT=25,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=110,HLS_SYN_LUT=231,HLS_VERSION=2019_2_0}" *)

module example_example (
        A_TDATA,
        A_TKEEP,
        A_TSTRB,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST,
        B_TDATA,
        B_TKEEP,
        B_TSTRB,
        B_TUSER,
        B_TLAST,
        B_TID,
        B_TDEST,
        ap_clk,
        ap_rst_n,
        A_TVALID,
        A_TREADY,
        ap_start,
        B_TVALID,
        B_TREADY,
        ap_done,
        ap_ready,
        ap_idle
);


input  [31:0] A_TDATA;
input  [3:0] A_TKEEP;
input  [3:0] A_TSTRB;
input  [1:0] A_TUSER;
input  [0:0] A_TLAST;
input  [4:0] A_TID;
input  [5:0] A_TDEST;
output  [31:0] B_TDATA;
output  [3:0] B_TKEEP;
output  [3:0] B_TSTRB;
output  [1:0] B_TUSER;
output  [0:0] B_TLAST;
output  [4:0] B_TID;
output  [5:0] B_TDEST;
input   ap_clk;
input   ap_rst_n;
input   A_TVALID;
output   A_TREADY;
input   ap_start;
output   B_TVALID;
input   B_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;

 reg    ap_rst_n_inv;
wire    proc_1_U0_ap_start;
wire    proc_1_U0_ap_done;
wire    proc_1_U0_ap_continue;
wire    proc_1_U0_ap_idle;
wire    proc_1_U0_ap_ready;
wire    proc_1_U0_start_out;
wire    proc_1_U0_start_write;
wire   [31:0] proc_1_U0_data_channel1_din;
wire    proc_1_U0_data_channel1_write;
wire   [31:0] proc_1_U0_data_channel2_din;
wire    proc_1_U0_data_channel2_write;
wire    proc_1_U0_A_TREADY;
wire    proc_2_U0_ap_start;
wire    proc_2_U0_ap_done;
wire    proc_2_U0_ap_continue;
wire    proc_2_U0_ap_idle;
wire    proc_2_U0_ap_ready;
wire    proc_2_U0_data_channel1_read;
wire    proc_2_U0_data_channel2_read;
wire   [31:0] proc_2_U0_B_TDATA;
wire    proc_2_U0_B_TVALID;
wire   [3:0] proc_2_U0_B_TKEEP;
wire   [3:0] proc_2_U0_B_TSTRB;
wire   [1:0] proc_2_U0_B_TUSER;
wire   [0:0] proc_2_U0_B_TLAST;
wire   [4:0] proc_2_U0_B_TID;
wire   [5:0] proc_2_U0_B_TDEST;
wire    ap_sync_continue;
wire    data_channel11_full_n;
wire   [31:0] data_channel11_dout;
wire    data_channel11_empty_n;
wire    data_channel22_full_n;
wire   [31:0] data_channel22_dout;
wire    data_channel22_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_proc_2_U0_din;
wire    start_for_proc_2_U0_full_n;
wire   [0:0] start_for_proc_2_U0_dout;
wire    start_for_proc_2_U0_empty_n;
wire    proc_2_U0_start_full_n;
wire    proc_2_U0_start_write;

example_proc_1 proc_1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(proc_1_U0_ap_start),
    .start_full_n(start_for_proc_2_U0_full_n),
    .ap_done(proc_1_U0_ap_done),
    .ap_continue(proc_1_U0_ap_continue),
    .ap_idle(proc_1_U0_ap_idle),
    .ap_ready(proc_1_U0_ap_ready),
    .start_out(proc_1_U0_start_out),
    .start_write(proc_1_U0_start_write),
    .data_channel1_din(proc_1_U0_data_channel1_din),
    .data_channel1_full_n(data_channel11_full_n),
    .data_channel1_write(proc_1_U0_data_channel1_write),
    .data_channel2_din(proc_1_U0_data_channel2_din),
    .data_channel2_full_n(data_channel22_full_n),
    .data_channel2_write(proc_1_U0_data_channel2_write),
    .A_TDATA(A_TDATA),
    .A_TVALID(A_TVALID),
    .A_TREADY(proc_1_U0_A_TREADY),
    .A_TKEEP(A_TKEEP),
    .A_TSTRB(A_TSTRB),
    .A_TUSER(A_TUSER),
    .A_TLAST(A_TLAST),
    .A_TID(A_TID),
    .A_TDEST(A_TDEST)
);

example_proc_2 proc_2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(proc_2_U0_ap_start),
    .ap_done(proc_2_U0_ap_done),
    .ap_continue(proc_2_U0_ap_continue),
    .ap_idle(proc_2_U0_ap_idle),
    .ap_ready(proc_2_U0_ap_ready),
    .data_channel1_dout(data_channel11_dout),
    .data_channel1_empty_n(data_channel11_empty_n),
    .data_channel1_read(proc_2_U0_data_channel1_read),
    .data_channel2_dout(data_channel22_dout),
    .data_channel2_empty_n(data_channel22_empty_n),
    .data_channel2_read(proc_2_U0_data_channel2_read),
    .B_TDATA(proc_2_U0_B_TDATA),
    .B_TVALID(proc_2_U0_B_TVALID),
    .B_TREADY(B_TREADY),
    .B_TKEEP(proc_2_U0_B_TKEEP),
    .B_TSTRB(proc_2_U0_B_TSTRB),
    .B_TUSER(proc_2_U0_B_TUSER),
    .B_TLAST(proc_2_U0_B_TLAST),
    .B_TID(proc_2_U0_B_TID),
    .B_TDEST(proc_2_U0_B_TDEST)
);

example_fifo_w32_d8_A data_channel11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(proc_1_U0_data_channel1_din),
    .if_full_n(data_channel11_full_n),
    .if_write(proc_1_U0_data_channel1_write),
    .if_dout(data_channel11_dout),
    .if_empty_n(data_channel11_empty_n),
    .if_read(proc_2_U0_data_channel1_read)
);

example_fifo_w32_d8_A data_channel22_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(proc_1_U0_data_channel2_din),
    .if_full_n(data_channel22_full_n),
    .if_write(proc_1_U0_data_channel2_write),
    .if_dout(data_channel22_dout),
    .if_empty_n(data_channel22_empty_n),
    .if_read(proc_2_U0_data_channel2_read)
);

example_start_for_proc_2_U0 start_for_proc_2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_proc_2_U0_din),
    .if_full_n(start_for_proc_2_U0_full_n),
    .if_write(proc_1_U0_start_write),
    .if_dout(start_for_proc_2_U0_dout),
    .if_empty_n(start_for_proc_2_U0_empty_n),
    .if_read(proc_2_U0_ap_ready)
);

assign A_TREADY = proc_1_U0_A_TREADY;

assign B_TDATA = proc_2_U0_B_TDATA;

assign B_TDEST = proc_2_U0_B_TDEST;

assign B_TID = proc_2_U0_B_TID;

assign B_TKEEP = proc_2_U0_B_TKEEP;

assign B_TLAST = proc_2_U0_B_TLAST;

assign B_TSTRB = proc_2_U0_B_TSTRB;

assign B_TUSER = proc_2_U0_B_TUSER;

assign B_TVALID = proc_2_U0_B_TVALID;

assign ap_done = proc_2_U0_ap_done;

assign ap_idle = (proc_2_U0_ap_idle & proc_1_U0_ap_idle);

assign ap_ready = proc_1_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b1;

assign ap_sync_done = proc_2_U0_ap_done;

assign ap_sync_ready = proc_1_U0_ap_ready;

assign proc_1_U0_ap_continue = 1'b1;

assign proc_1_U0_ap_start = ap_start;

assign proc_2_U0_ap_continue = 1'b1;

assign proc_2_U0_ap_start = start_for_proc_2_U0_empty_n;

assign proc_2_U0_start_full_n = 1'b1;

assign proc_2_U0_start_write = 1'b0;

assign start_for_proc_2_U0_din = 1'b1;

endmodule //example_example
