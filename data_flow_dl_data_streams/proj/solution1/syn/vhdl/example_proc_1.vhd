-- ==============================================================
-- RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.0
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_proc_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_channel1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_channel1_full_n : IN STD_LOGIC;
    data_channel1_write : OUT STD_LOGIC;
    data_channel2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_channel2_full_n : IN STD_LOGIC;
    data_channel2_write : OUT STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of example_proc_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_channel1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln17_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_channel2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln22_reg_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln17_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal access03_reg_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_fu_125_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_V_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_4_fu_141_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_A_V_data_V_U_apdone_blk : STD_LOGIC;
    signal A_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal A_TVALID_int : STD_LOGIC;
    signal A_TREADY_int : STD_LOGIC;
    signal regslice_both_A_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal A_TKEEP_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_A_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal A_TSTRB_int : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_A_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_user_V_U_apdone_blk : STD_LOGIC;
    signal A_TUSER_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_A_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_last_V_U_apdone_blk : STD_LOGIC;
    signal A_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_A_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_id_V_U_apdone_blk : STD_LOGIC;
    signal A_TID_int : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_A_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_A_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal A_TDEST_int : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_A_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_A_V_dest_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_A_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => A_TDATA,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_data_V_U_ack_in,
        data_out => A_TDATA_int,
        vld_out => A_TVALID_int,
        ack_out => A_TREADY_int,
        apdone_blk => regslice_both_A_V_data_V_U_apdone_blk);

    regslice_both_A_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => A_TKEEP,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_keep_V_U_ack_in,
        data_out => A_TKEEP_int,
        vld_out => regslice_both_A_V_keep_V_U_vld_out,
        ack_out => A_TREADY_int,
        apdone_blk => regslice_both_A_V_keep_V_U_apdone_blk);

    regslice_both_A_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => A_TSTRB,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_strb_V_U_ack_in,
        data_out => A_TSTRB_int,
        vld_out => regslice_both_A_V_strb_V_U_vld_out,
        ack_out => A_TREADY_int,
        apdone_blk => regslice_both_A_V_strb_V_U_apdone_blk);

    regslice_both_A_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => A_TUSER,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_user_V_U_ack_in,
        data_out => A_TUSER_int,
        vld_out => regslice_both_A_V_user_V_U_vld_out,
        ack_out => A_TREADY_int,
        apdone_blk => regslice_both_A_V_user_V_U_apdone_blk);

    regslice_both_A_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => A_TLAST,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_last_V_U_ack_in,
        data_out => A_TLAST_int,
        vld_out => regslice_both_A_V_last_V_U_vld_out,
        ack_out => A_TREADY_int,
        apdone_blk => regslice_both_A_V_last_V_U_apdone_blk);

    regslice_both_A_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => A_TID,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_id_V_U_ack_in,
        data_out => A_TID_int,
        vld_out => regslice_both_A_V_id_V_U_vld_out,
        ack_out => A_TREADY_int,
        apdone_blk => regslice_both_A_V_id_V_U_apdone_blk);

    regslice_both_A_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => A_TDEST,
        vld_in => A_TVALID,
        ack_in => regslice_both_A_V_dest_V_U_ack_in,
        data_out => A_TDEST_int,
        vld_out => regslice_both_A_V_dest_V_U_vld_out,
        ack_out => A_TREADY_int,
        apdone_blk => regslice_both_A_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    access03_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_147 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                access03_reg_84 <= tmp_data_V_reg_156;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                access03_reg_84 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_3_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_3_reg_108 <= ap_const_lv4_0;
            elsif (((icmp_ln22_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_3_reg_108 <= i_4_fu_141_p2;
            end if; 
        end if;
    end process;

    i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_97 <= i_2_fu_125_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_97 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln17_reg_147 <= icmp_ln17_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln22_reg_162 <= icmp_ln22_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_V_reg_156 <= A_TDATA_int;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln17_fu_119_p2, icmp_ln22_fu_135_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln17_fu_119_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln17_fu_119_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln22_fu_135_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln22_fu_135_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln17_fu_119_p2, A_TVALID_int)
    begin
        if (((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_TDATA_blk_n <= A_TVALID_int;
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_TREADY_assign_proc : process(A_TVALID, regslice_both_A_V_data_V_U_ack_in)
    begin
        if (((ap_const_logic_1 = A_TVALID) and (regslice_both_A_V_data_V_U_ack_in = ap_const_logic_1))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln17_fu_119_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_TREADY_int <= ap_const_logic_1;
        else 
            A_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(data_channel1_full_n, ap_enable_reg_pp0_iter1, icmp_ln17_reg_147, ap_enable_reg_pp0_iter0, icmp_ln17_fu_119_p2, A_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln17_reg_147 = ap_const_lv1_0) and (data_channel1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data_channel1_full_n, ap_enable_reg_pp0_iter1, icmp_ln17_reg_147, ap_enable_reg_pp0_iter0, icmp_ln17_fu_119_p2, A_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln17_reg_147 = ap_const_lv1_0) and (data_channel1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_channel1_full_n, ap_enable_reg_pp0_iter1, icmp_ln17_reg_147, ap_enable_reg_pp0_iter0, icmp_ln17_fu_119_p2, A_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_TVALID_int) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln17_reg_147 = ap_const_lv1_0) and (data_channel1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(data_channel2_full_n, ap_enable_reg_pp1_iter1, icmp_ln22_reg_162)
    begin
                ap_block_pp1_stage0_01001 <= ((icmp_ln22_reg_162 = ap_const_lv1_0) and (data_channel2_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(data_channel2_full_n, ap_enable_reg_pp1_iter1, icmp_ln22_reg_162)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln22_reg_162 = ap_const_lv1_0) and (data_channel2_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(data_channel2_full_n, ap_enable_reg_pp1_iter1, icmp_ln22_reg_162)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln22_reg_162 = ap_const_lv1_0) and (data_channel2_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln17_fu_119_p2, A_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln17_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_TVALID_int));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_channel1_full_n, icmp_ln17_reg_147)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln17_reg_147 = ap_const_lv1_0) and (data_channel1_full_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(data_channel2_full_n, icmp_ln22_reg_162)
    begin
                ap_block_state6_pp1_stage0_iter1 <= ((icmp_ln22_reg_162 = ap_const_lv1_0) and (data_channel2_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln17_fu_119_p2)
    begin
        if ((icmp_ln17_fu_119_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln22_fu_135_p2)
    begin
        if ((icmp_ln22_fu_135_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_channel1_blk_n_assign_proc : process(data_channel1_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln17_reg_147)
    begin
        if (((icmp_ln17_reg_147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_channel1_blk_n <= data_channel1_full_n;
        else 
            data_channel1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_channel1_din <= tmp_data_V_reg_156;

    data_channel1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln17_reg_147, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_reg_147 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_channel1_write <= ap_const_logic_1;
        else 
            data_channel1_write <= ap_const_logic_0;
        end if; 
    end process;


    data_channel2_blk_n_assign_proc : process(data_channel2_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln22_reg_162)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln22_reg_162 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            data_channel2_blk_n <= data_channel2_full_n;
        else 
            data_channel2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_channel2_din <= access03_reg_84;

    data_channel2_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln22_reg_162, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln22_reg_162 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            data_channel2_write <= ap_const_logic_1;
        else 
            data_channel2_write <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_125_p2 <= std_logic_vector(unsigned(i_reg_97) + unsigned(ap_const_lv4_1));
    i_4_fu_141_p2 <= std_logic_vector(unsigned(i_3_reg_108) + unsigned(ap_const_lv4_1));
    icmp_ln17_fu_119_p2 <= "1" when (i_reg_97 = ap_const_lv4_A) else "0";
    icmp_ln22_fu_135_p2 <= "1" when (i_3_reg_108 = ap_const_lv4_A) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
