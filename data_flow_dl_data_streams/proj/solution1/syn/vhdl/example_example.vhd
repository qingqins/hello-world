-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.0
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_example is
port (
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of example_example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example_example,hls_ip_2019_2_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-2,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.898000,HLS_SYN_LAT=24,HLS_SYN_TPT=25,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=297,HLS_SYN_LUT=343,HLS_VERSION=2019_2_0}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal proc_1_U0_ap_start : STD_LOGIC;
    signal proc_1_U0_ap_done : STD_LOGIC;
    signal proc_1_U0_ap_continue : STD_LOGIC;
    signal proc_1_U0_ap_idle : STD_LOGIC;
    signal proc_1_U0_ap_ready : STD_LOGIC;
    signal proc_1_U0_start_out : STD_LOGIC;
    signal proc_1_U0_start_write : STD_LOGIC;
    signal proc_1_U0_data_channel1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal proc_1_U0_data_channel1_write : STD_LOGIC;
    signal proc_1_U0_data_channel2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal proc_1_U0_data_channel2_write : STD_LOGIC;
    signal proc_1_U0_A_TREADY : STD_LOGIC;
    signal proc_2_U0_ap_start : STD_LOGIC;
    signal proc_2_U0_ap_done : STD_LOGIC;
    signal proc_2_U0_ap_continue : STD_LOGIC;
    signal proc_2_U0_ap_idle : STD_LOGIC;
    signal proc_2_U0_ap_ready : STD_LOGIC;
    signal proc_2_U0_data_channel1_read : STD_LOGIC;
    signal proc_2_U0_data_channel2_read : STD_LOGIC;
    signal proc_2_U0_B_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal proc_2_U0_B_TVALID : STD_LOGIC;
    signal proc_2_U0_B_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal proc_2_U0_B_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal proc_2_U0_B_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal proc_2_U0_B_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal proc_2_U0_B_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal proc_2_U0_B_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal data_channel11_full_n : STD_LOGIC;
    signal data_channel11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_channel11_empty_n : STD_LOGIC;
    signal data_channel22_full_n : STD_LOGIC;
    signal data_channel22_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_channel22_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_proc_2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_proc_2_U0_full_n : STD_LOGIC;
    signal start_for_proc_2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_proc_2_U0_empty_n : STD_LOGIC;
    signal proc_2_U0_start_full_n : STD_LOGIC;
    signal proc_2_U0_start_write : STD_LOGIC;

    component example_proc_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_channel1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_channel1_full_n : IN STD_LOGIC;
        data_channel1_write : OUT STD_LOGIC;
        data_channel2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_channel2_full_n : IN STD_LOGIC;
        data_channel2_write : OUT STD_LOGIC;
        A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        A_TVALID : IN STD_LOGIC;
        A_TREADY : OUT STD_LOGIC;
        A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        A_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        A_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        A_TDEST : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component example_proc_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_channel1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_channel1_empty_n : IN STD_LOGIC;
        data_channel1_read : OUT STD_LOGIC;
        data_channel2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_channel2_empty_n : IN STD_LOGIC;
        data_channel2_read : OUT STD_LOGIC;
        B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_TVALID : OUT STD_LOGIC;
        B_TREADY : IN STD_LOGIC;
        B_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        B_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        B_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component example_fifo_w32_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component example_start_for_proc_2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    proc_1_U0 : component example_proc_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => proc_1_U0_ap_start,
        start_full_n => start_for_proc_2_U0_full_n,
        ap_done => proc_1_U0_ap_done,
        ap_continue => proc_1_U0_ap_continue,
        ap_idle => proc_1_U0_ap_idle,
        ap_ready => proc_1_U0_ap_ready,
        start_out => proc_1_U0_start_out,
        start_write => proc_1_U0_start_write,
        data_channel1_din => proc_1_U0_data_channel1_din,
        data_channel1_full_n => data_channel11_full_n,
        data_channel1_write => proc_1_U0_data_channel1_write,
        data_channel2_din => proc_1_U0_data_channel2_din,
        data_channel2_full_n => data_channel22_full_n,
        data_channel2_write => proc_1_U0_data_channel2_write,
        A_TDATA => A_TDATA,
        A_TVALID => A_TVALID,
        A_TREADY => proc_1_U0_A_TREADY,
        A_TKEEP => A_TKEEP,
        A_TSTRB => A_TSTRB,
        A_TUSER => A_TUSER,
        A_TLAST => A_TLAST,
        A_TID => A_TID,
        A_TDEST => A_TDEST);

    proc_2_U0 : component example_proc_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => proc_2_U0_ap_start,
        ap_done => proc_2_U0_ap_done,
        ap_continue => proc_2_U0_ap_continue,
        ap_idle => proc_2_U0_ap_idle,
        ap_ready => proc_2_U0_ap_ready,
        data_channel1_dout => data_channel11_dout,
        data_channel1_empty_n => data_channel11_empty_n,
        data_channel1_read => proc_2_U0_data_channel1_read,
        data_channel2_dout => data_channel22_dout,
        data_channel2_empty_n => data_channel22_empty_n,
        data_channel2_read => proc_2_U0_data_channel2_read,
        B_TDATA => proc_2_U0_B_TDATA,
        B_TVALID => proc_2_U0_B_TVALID,
        B_TREADY => B_TREADY,
        B_TKEEP => proc_2_U0_B_TKEEP,
        B_TSTRB => proc_2_U0_B_TSTRB,
        B_TUSER => proc_2_U0_B_TUSER,
        B_TLAST => proc_2_U0_B_TLAST,
        B_TID => proc_2_U0_B_TID,
        B_TDEST => proc_2_U0_B_TDEST);

    data_channel11_U : component example_fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => proc_1_U0_data_channel1_din,
        if_full_n => data_channel11_full_n,
        if_write => proc_1_U0_data_channel1_write,
        if_dout => data_channel11_dout,
        if_empty_n => data_channel11_empty_n,
        if_read => proc_2_U0_data_channel1_read);

    data_channel22_U : component example_fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => proc_1_U0_data_channel2_din,
        if_full_n => data_channel22_full_n,
        if_write => proc_1_U0_data_channel2_write,
        if_dout => data_channel22_dout,
        if_empty_n => data_channel22_empty_n,
        if_read => proc_2_U0_data_channel2_read);

    start_for_proc_2_U0_U : component example_start_for_proc_2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_proc_2_U0_din,
        if_full_n => start_for_proc_2_U0_full_n,
        if_write => proc_1_U0_start_write,
        if_dout => start_for_proc_2_U0_dout,
        if_empty_n => start_for_proc_2_U0_empty_n,
        if_read => proc_2_U0_ap_ready);




    A_TREADY <= proc_1_U0_A_TREADY;
    B_TDATA <= proc_2_U0_B_TDATA;
    B_TDEST <= proc_2_U0_B_TDEST;
    B_TID <= proc_2_U0_B_TID;
    B_TKEEP <= proc_2_U0_B_TKEEP;
    B_TLAST <= proc_2_U0_B_TLAST;
    B_TSTRB <= proc_2_U0_B_TSTRB;
    B_TUSER <= proc_2_U0_B_TUSER;
    B_TVALID <= proc_2_U0_B_TVALID;
    ap_done <= proc_2_U0_ap_done;
    ap_idle <= (proc_2_U0_ap_idle and proc_1_U0_ap_idle);
    ap_ready <= proc_1_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= proc_2_U0_ap_done;
    ap_sync_ready <= proc_1_U0_ap_ready;
    proc_1_U0_ap_continue <= ap_const_logic_1;
    proc_1_U0_ap_start <= ap_start;
    proc_2_U0_ap_continue <= ap_const_logic_1;
    proc_2_U0_ap_start <= start_for_proc_2_U0_empty_n;
    proc_2_U0_start_full_n <= ap_const_logic_1;
    proc_2_U0_start_write <= ap_const_logic_0;
    start_for_proc_2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
