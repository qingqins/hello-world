// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module example_proc_1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_channel1_din,
        data_channel1_full_n,
        data_channel1_write,
        data_channel2_din,
        data_channel2_full_n,
        data_channel2_write,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [31:0] data_channel1_din;
input   data_channel1_full_n;
output   data_channel1_write;
output  [31:0] data_channel2_din;
input   data_channel2_full_n;
output   data_channel2_write;
input  [31:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [3:0] A_TKEEP;
input  [3:0] A_TSTRB;
input  [1:0] A_TUSER;
input  [0:0] A_TLAST;
input  [4:0] A_TID;
input  [5:0] A_TDEST;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_channel1_write;
reg data_channel2_write;
reg A_TREADY;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_channel1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_147;
reg    data_channel2_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln30_reg_162;
reg    A_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln25_fu_119_p2;
reg   [31:0] access03_reg_84;
reg   [3:0] i_reg_97;
reg   [3:0] i_3_reg_108;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_2_fu_125_p2;
reg   [31:0] tmp_data_V_reg_156;
wire   [0:0] icmp_ln30_fu_135_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [3:0] i_4_fu_141_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire    ap_CS_fsm_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_A_V_data_V_U_apdone_blk;
wire   [31:0] A_TDATA_int;
wire    A_TVALID_int;
reg    A_TREADY_int;
wire    regslice_both_A_V_data_V_U_ack_in;
wire    regslice_both_A_V_keep_V_U_apdone_blk;
wire   [3:0] A_TKEEP_int;
wire    regslice_both_A_V_keep_V_U_vld_out;
wire    regslice_both_A_V_keep_V_U_ack_in;
wire    regslice_both_A_V_strb_V_U_apdone_blk;
wire   [3:0] A_TSTRB_int;
wire    regslice_both_A_V_strb_V_U_vld_out;
wire    regslice_both_A_V_strb_V_U_ack_in;
wire    regslice_both_A_V_user_V_U_apdone_blk;
wire   [1:0] A_TUSER_int;
wire    regslice_both_A_V_user_V_U_vld_out;
wire    regslice_both_A_V_user_V_U_ack_in;
wire    regslice_both_A_V_last_V_U_apdone_blk;
wire   [0:0] A_TLAST_int;
wire    regslice_both_A_V_last_V_U_vld_out;
wire    regslice_both_A_V_last_V_U_ack_in;
wire    regslice_both_A_V_id_V_U_apdone_blk;
wire   [4:0] A_TID_int;
wire    regslice_both_A_V_id_V_U_vld_out;
wire    regslice_both_A_V_id_V_U_ack_in;
wire    regslice_both_A_V_dest_V_U_apdone_blk;
wire   [5:0] A_TDEST_int;
wire    regslice_both_A_V_dest_V_U_vld_out;
wire    regslice_both_A_V_dest_V_U_ack_in;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_A_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TDATA),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_data_V_U_ack_in),
    .data_out(A_TDATA_int),
    .vld_out(A_TVALID_int),
    .ack_out(A_TREADY_int),
    .apdone_blk(regslice_both_A_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_A_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TKEEP),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_keep_V_U_ack_in),
    .data_out(A_TKEEP_int),
    .vld_out(regslice_both_A_V_keep_V_U_vld_out),
    .ack_out(A_TREADY_int),
    .apdone_blk(regslice_both_A_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_A_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TSTRB),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_strb_V_U_ack_in),
    .data_out(A_TSTRB_int),
    .vld_out(regslice_both_A_V_strb_V_U_vld_out),
    .ack_out(A_TREADY_int),
    .apdone_blk(regslice_both_A_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_A_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TUSER),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_user_V_U_ack_in),
    .data_out(A_TUSER_int),
    .vld_out(regslice_both_A_V_user_V_U_vld_out),
    .ack_out(A_TREADY_int),
    .apdone_blk(regslice_both_A_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_A_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TLAST),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_last_V_U_ack_in),
    .data_out(A_TLAST_int),
    .vld_out(regslice_both_A_V_last_V_U_vld_out),
    .ack_out(A_TREADY_int),
    .apdone_blk(regslice_both_A_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 5 ))
regslice_both_A_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TID),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_id_V_U_ack_in),
    .data_out(A_TID_int),
    .vld_out(regslice_both_A_V_id_V_U_vld_out),
    .ack_out(A_TREADY_int),
    .apdone_blk(regslice_both_A_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 6 ))
regslice_both_A_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(A_TDEST),
    .vld_in(A_TVALID),
    .ack_in(regslice_both_A_V_dest_V_U_ack_in),
    .data_out(A_TDEST_int),
    .vld_out(regslice_both_A_V_dest_V_U_vld_out),
    .ack_out(A_TREADY_int),
    .apdone_blk(regslice_both_A_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_147 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        access03_reg_84 <= tmp_data_V_reg_156;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        access03_reg_84 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_108 <= 4'd0;
    end else if (((icmp_ln30_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_3_reg_108 <= i_4_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_119_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_97 <= i_2_fu_125_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_147 <= icmp_ln25_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln30_reg_162 <= icmp_ln30_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_119_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_reg_156 <= A_TDATA_int;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_119_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_TDATA_blk_n = A_TVALID_int;
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == A_TVALID) & (regslice_both_A_V_data_V_U_ack_in == 1'b1))) begin
        A_TREADY = 1'b1;
    end else begin
        A_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_119_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_TREADY_int = 1'b1;
    end else begin
        A_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_119_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_135_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_147 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_channel1_blk_n = data_channel1_full_n;
    end else begin
        data_channel1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_147 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_channel1_write = 1'b1;
    end else begin
        data_channel1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln30_reg_162 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_channel2_blk_n = data_channel2_full_n;
    end else begin
        data_channel2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_162 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        data_channel2_write = 1'b1;
    end else begin
        data_channel2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln25_fu_119_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln25_fu_119_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln30_fu_135_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln30_fu_135_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln25_fu_119_p2 == 1'd0) & (1'b0 == A_TVALID_int) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln25_reg_147 == 1'd0) & (data_channel1_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln25_fu_119_p2 == 1'd0) & (1'b0 == A_TVALID_int) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln25_reg_147 == 1'd0) & (data_channel1_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln25_fu_119_p2 == 1'd0) & (1'b0 == A_TVALID_int) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln25_reg_147 == 1'd0) & (data_channel1_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((icmp_ln30_reg_162 == 1'd0) & (data_channel2_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln30_reg_162 == 1'd0) & (data_channel2_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln30_reg_162 == 1'd0) & (data_channel2_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln25_fu_119_p2 == 1'd0) & (1'b0 == A_TVALID_int));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln25_reg_147 == 1'd0) & (data_channel1_full_n == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln30_reg_162 == 1'd0) & (data_channel2_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign data_channel1_din = tmp_data_V_reg_156;

assign data_channel2_din = access03_reg_84;

assign i_2_fu_125_p2 = (i_reg_97 + 4'd1);

assign i_4_fu_141_p2 = (i_3_reg_108 + 4'd1);

assign icmp_ln25_fu_119_p2 = ((i_reg_97 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_135_p2 = ((i_3_reg_108 == 4'd10) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //example_proc_1
