// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "example_example.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int example_example::C_S_AXI_DATA_WIDTH = "100000";
const int example_example::C_S_AXI_WSTRB_WIDTH = "100";
const int example_example::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic example_example::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> example_example::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> example_example::ap_const_lv4_0 = "0000";
const sc_lv<2> example_example::ap_const_lv2_0 = "00";
const sc_lv<1> example_example::ap_const_lv1_0 = "0";
const sc_lv<5> example_example::ap_const_lv5_0 = "00000";
const sc_lv<6> example_example::ap_const_lv6_0 = "000000";
const sc_logic example_example::ap_const_logic_0 = sc_dt::Log_0;

example_example::example_example(sc_module_name name) : sc_module(name), mVcdFile(0) {
    example_control_s_axi_U = new example_example_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("example_control_s_axi_U");
    example_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    example_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    example_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    example_control_s_axi_U->WVALID(s_axi_control_WVALID);
    example_control_s_axi_U->WREADY(s_axi_control_WREADY);
    example_control_s_axi_U->WDATA(s_axi_control_WDATA);
    example_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    example_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    example_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    example_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    example_control_s_axi_U->RVALID(s_axi_control_RVALID);
    example_control_s_axi_U->RREADY(s_axi_control_RREADY);
    example_control_s_axi_U->RDATA(s_axi_control_RDATA);
    example_control_s_axi_U->RRESP(s_axi_control_RRESP);
    example_control_s_axi_U->BVALID(s_axi_control_BVALID);
    example_control_s_axi_U->BREADY(s_axi_control_BREADY);
    example_control_s_axi_U->BRESP(s_axi_control_BRESP);
    example_control_s_axi_U->ACLK(ap_clk);
    example_control_s_axi_U->ARESET(ap_rst_n_inv);
    example_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    example_control_s_axi_U->ap_start(ap_start);
    example_control_s_axi_U->interrupt(interrupt);
    example_control_s_axi_U->ap_ready(ap_ready);
    example_control_s_axi_U->ap_done(ap_done);
    example_control_s_axi_U->ap_continue(ap_continue);
    example_control_s_axi_U->ap_idle(ap_idle);
    proc_1_U0 = new example_proc_1("proc_1_U0");
    proc_1_U0->ap_clk(ap_clk);
    proc_1_U0->ap_rst(ap_rst_n_inv);
    proc_1_U0->ap_start(proc_1_U0_ap_start);
    proc_1_U0->start_full_n(start_for_proc_2_U0_full_n);
    proc_1_U0->ap_done(proc_1_U0_ap_done);
    proc_1_U0->ap_continue(proc_1_U0_ap_continue);
    proc_1_U0->ap_idle(proc_1_U0_ap_idle);
    proc_1_U0->ap_ready(proc_1_U0_ap_ready);
    proc_1_U0->start_out(proc_1_U0_start_out);
    proc_1_U0->start_write(proc_1_U0_start_write);
    proc_1_U0->data_channel1_din(proc_1_U0_data_channel1_din);
    proc_1_U0->data_channel1_full_n(data_channel11_full_n);
    proc_1_U0->data_channel1_write(proc_1_U0_data_channel1_write);
    proc_1_U0->data_channel2_din(proc_1_U0_data_channel2_din);
    proc_1_U0->data_channel2_full_n(data_channel22_full_n);
    proc_1_U0->data_channel2_write(proc_1_U0_data_channel2_write);
    proc_1_U0->A_TDATA(A_TDATA);
    proc_1_U0->A_TVALID(A_TVALID);
    proc_1_U0->A_TREADY(proc_1_U0_A_TREADY);
    proc_1_U0->A_TKEEP(A_TKEEP);
    proc_1_U0->A_TSTRB(A_TSTRB);
    proc_1_U0->A_TUSER(A_TUSER);
    proc_1_U0->A_TLAST(A_TLAST);
    proc_1_U0->A_TID(A_TID);
    proc_1_U0->A_TDEST(A_TDEST);
    proc_2_U0 = new example_proc_2("proc_2_U0");
    proc_2_U0->ap_clk(ap_clk);
    proc_2_U0->ap_rst(ap_rst_n_inv);
    proc_2_U0->ap_start(proc_2_U0_ap_start);
    proc_2_U0->ap_done(proc_2_U0_ap_done);
    proc_2_U0->ap_continue(proc_2_U0_ap_continue);
    proc_2_U0->ap_idle(proc_2_U0_ap_idle);
    proc_2_U0->ap_ready(proc_2_U0_ap_ready);
    proc_2_U0->data_channel1_dout(data_channel11_dout);
    proc_2_U0->data_channel1_empty_n(data_channel11_empty_n);
    proc_2_U0->data_channel1_read(proc_2_U0_data_channel1_read);
    proc_2_U0->data_channel2_dout(data_channel22_dout);
    proc_2_U0->data_channel2_empty_n(data_channel22_empty_n);
    proc_2_U0->data_channel2_read(proc_2_U0_data_channel2_read);
    proc_2_U0->B_TDATA(proc_2_U0_B_TDATA);
    proc_2_U0->B_TVALID(proc_2_U0_B_TVALID);
    proc_2_U0->B_TREADY(B_TREADY);
    proc_2_U0->B_TKEEP(proc_2_U0_B_TKEEP);
    proc_2_U0->B_TSTRB(proc_2_U0_B_TSTRB);
    proc_2_U0->B_TUSER(proc_2_U0_B_TUSER);
    proc_2_U0->B_TLAST(proc_2_U0_B_TLAST);
    proc_2_U0->B_TID(proc_2_U0_B_TID);
    proc_2_U0->B_TDEST(proc_2_U0_B_TDEST);
    data_channel11_U = new example_fifo_w32_d8_A("data_channel11_U");
    data_channel11_U->clk(ap_clk);
    data_channel11_U->reset(ap_rst_n_inv);
    data_channel11_U->if_read_ce(ap_var_for_const0);
    data_channel11_U->if_write_ce(ap_var_for_const0);
    data_channel11_U->if_din(proc_1_U0_data_channel1_din);
    data_channel11_U->if_full_n(data_channel11_full_n);
    data_channel11_U->if_write(proc_1_U0_data_channel1_write);
    data_channel11_U->if_dout(data_channel11_dout);
    data_channel11_U->if_empty_n(data_channel11_empty_n);
    data_channel11_U->if_read(proc_2_U0_data_channel1_read);
    data_channel22_U = new example_fifo_w32_d8_A("data_channel22_U");
    data_channel22_U->clk(ap_clk);
    data_channel22_U->reset(ap_rst_n_inv);
    data_channel22_U->if_read_ce(ap_var_for_const0);
    data_channel22_U->if_write_ce(ap_var_for_const0);
    data_channel22_U->if_din(proc_1_U0_data_channel2_din);
    data_channel22_U->if_full_n(data_channel22_full_n);
    data_channel22_U->if_write(proc_1_U0_data_channel2_write);
    data_channel22_U->if_dout(data_channel22_dout);
    data_channel22_U->if_empty_n(data_channel22_empty_n);
    data_channel22_U->if_read(proc_2_U0_data_channel2_read);
    start_for_proc_2_U0_U = new example_start_for_proc_2_U0("start_for_proc_2_U0_U");
    start_for_proc_2_U0_U->clk(ap_clk);
    start_for_proc_2_U0_U->reset(ap_rst_n_inv);
    start_for_proc_2_U0_U->if_read_ce(ap_var_for_const0);
    start_for_proc_2_U0_U->if_write_ce(ap_var_for_const0);
    start_for_proc_2_U0_U->if_din(start_for_proc_2_U0_din);
    start_for_proc_2_U0_U->if_full_n(start_for_proc_2_U0_full_n);
    start_for_proc_2_U0_U->if_write(proc_1_U0_start_write);
    start_for_proc_2_U0_U->if_dout(start_for_proc_2_U0_dout);
    start_for_proc_2_U0_U->if_empty_n(start_for_proc_2_U0_empty_n);
    start_for_proc_2_U0_U->if_read(proc_2_U0_ap_ready);

    SC_METHOD(thread_A_TREADY);
    sensitive << ( proc_1_U0_A_TREADY );

    SC_METHOD(thread_B_TDATA);
    sensitive << ( proc_2_U0_B_TDATA );

    SC_METHOD(thread_B_TDEST);
    sensitive << ( proc_2_U0_B_TDEST );

    SC_METHOD(thread_B_TID);
    sensitive << ( proc_2_U0_B_TID );

    SC_METHOD(thread_B_TKEEP);
    sensitive << ( proc_2_U0_B_TKEEP );

    SC_METHOD(thread_B_TLAST);
    sensitive << ( proc_2_U0_B_TLAST );

    SC_METHOD(thread_B_TSTRB);
    sensitive << ( proc_2_U0_B_TSTRB );

    SC_METHOD(thread_B_TUSER);
    sensitive << ( proc_2_U0_B_TUSER );

    SC_METHOD(thread_B_TVALID);
    sensitive << ( proc_2_U0_B_TVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( proc_2_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( proc_1_U0_ap_idle );
    sensitive << ( proc_2_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( proc_1_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( proc_2_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( proc_1_U0_ap_ready );

    SC_METHOD(thread_proc_1_U0_ap_continue);

    SC_METHOD(thread_proc_1_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_proc_2_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_proc_2_U0_ap_start);
    sensitive << ( start_for_proc_2_U0_empty_n );

    SC_METHOD(thread_proc_2_U0_start_full_n);

    SC_METHOD(thread_proc_2_U0_start_write);

    SC_METHOD(thread_start_for_proc_2_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "example_example_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, A_TDATA, "(port)A_TDATA");
    sc_trace(mVcdFile, A_TKEEP, "(port)A_TKEEP");
    sc_trace(mVcdFile, A_TSTRB, "(port)A_TSTRB");
    sc_trace(mVcdFile, A_TUSER, "(port)A_TUSER");
    sc_trace(mVcdFile, A_TLAST, "(port)A_TLAST");
    sc_trace(mVcdFile, A_TID, "(port)A_TID");
    sc_trace(mVcdFile, A_TDEST, "(port)A_TDEST");
    sc_trace(mVcdFile, B_TDATA, "(port)B_TDATA");
    sc_trace(mVcdFile, B_TKEEP, "(port)B_TKEEP");
    sc_trace(mVcdFile, B_TSTRB, "(port)B_TSTRB");
    sc_trace(mVcdFile, B_TUSER, "(port)B_TUSER");
    sc_trace(mVcdFile, B_TLAST, "(port)B_TLAST");
    sc_trace(mVcdFile, B_TID, "(port)B_TID");
    sc_trace(mVcdFile, B_TDEST, "(port)B_TDEST");
    sc_trace(mVcdFile, A_TVALID, "(port)A_TVALID");
    sc_trace(mVcdFile, A_TREADY, "(port)A_TREADY");
    sc_trace(mVcdFile, B_TVALID, "(port)B_TVALID");
    sc_trace(mVcdFile, B_TREADY, "(port)B_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_continue, "ap_continue");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, proc_1_U0_ap_start, "proc_1_U0_ap_start");
    sc_trace(mVcdFile, proc_1_U0_ap_done, "proc_1_U0_ap_done");
    sc_trace(mVcdFile, proc_1_U0_ap_continue, "proc_1_U0_ap_continue");
    sc_trace(mVcdFile, proc_1_U0_ap_idle, "proc_1_U0_ap_idle");
    sc_trace(mVcdFile, proc_1_U0_ap_ready, "proc_1_U0_ap_ready");
    sc_trace(mVcdFile, proc_1_U0_start_out, "proc_1_U0_start_out");
    sc_trace(mVcdFile, proc_1_U0_start_write, "proc_1_U0_start_write");
    sc_trace(mVcdFile, proc_1_U0_data_channel1_din, "proc_1_U0_data_channel1_din");
    sc_trace(mVcdFile, proc_1_U0_data_channel1_write, "proc_1_U0_data_channel1_write");
    sc_trace(mVcdFile, proc_1_U0_data_channel2_din, "proc_1_U0_data_channel2_din");
    sc_trace(mVcdFile, proc_1_U0_data_channel2_write, "proc_1_U0_data_channel2_write");
    sc_trace(mVcdFile, proc_1_U0_A_TREADY, "proc_1_U0_A_TREADY");
    sc_trace(mVcdFile, proc_2_U0_ap_start, "proc_2_U0_ap_start");
    sc_trace(mVcdFile, proc_2_U0_ap_done, "proc_2_U0_ap_done");
    sc_trace(mVcdFile, proc_2_U0_ap_continue, "proc_2_U0_ap_continue");
    sc_trace(mVcdFile, proc_2_U0_ap_idle, "proc_2_U0_ap_idle");
    sc_trace(mVcdFile, proc_2_U0_ap_ready, "proc_2_U0_ap_ready");
    sc_trace(mVcdFile, proc_2_U0_data_channel1_read, "proc_2_U0_data_channel1_read");
    sc_trace(mVcdFile, proc_2_U0_data_channel2_read, "proc_2_U0_data_channel2_read");
    sc_trace(mVcdFile, proc_2_U0_B_TDATA, "proc_2_U0_B_TDATA");
    sc_trace(mVcdFile, proc_2_U0_B_TVALID, "proc_2_U0_B_TVALID");
    sc_trace(mVcdFile, proc_2_U0_B_TKEEP, "proc_2_U0_B_TKEEP");
    sc_trace(mVcdFile, proc_2_U0_B_TSTRB, "proc_2_U0_B_TSTRB");
    sc_trace(mVcdFile, proc_2_U0_B_TUSER, "proc_2_U0_B_TUSER");
    sc_trace(mVcdFile, proc_2_U0_B_TLAST, "proc_2_U0_B_TLAST");
    sc_trace(mVcdFile, proc_2_U0_B_TID, "proc_2_U0_B_TID");
    sc_trace(mVcdFile, proc_2_U0_B_TDEST, "proc_2_U0_B_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, data_channel11_full_n, "data_channel11_full_n");
    sc_trace(mVcdFile, data_channel11_dout, "data_channel11_dout");
    sc_trace(mVcdFile, data_channel11_empty_n, "data_channel11_empty_n");
    sc_trace(mVcdFile, data_channel22_full_n, "data_channel22_full_n");
    sc_trace(mVcdFile, data_channel22_dout, "data_channel22_dout");
    sc_trace(mVcdFile, data_channel22_empty_n, "data_channel22_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_proc_2_U0_din, "start_for_proc_2_U0_din");
    sc_trace(mVcdFile, start_for_proc_2_U0_full_n, "start_for_proc_2_U0_full_n");
    sc_trace(mVcdFile, start_for_proc_2_U0_dout, "start_for_proc_2_U0_dout");
    sc_trace(mVcdFile, start_for_proc_2_U0_empty_n, "start_for_proc_2_U0_empty_n");
    sc_trace(mVcdFile, proc_2_U0_start_full_n, "proc_2_U0_start_full_n");
    sc_trace(mVcdFile, proc_2_U0_start_write, "proc_2_U0_start_write");
#endif

    }
    mHdltvinHandle.open("example_example.hdltvin.dat");
    mHdltvoutHandle.open("example_example.hdltvout.dat");
}

example_example::~example_example() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete example_control_s_axi_U;
    delete proc_1_U0;
    delete proc_2_U0;
    delete data_channel11_U;
    delete data_channel22_U;
    delete start_for_proc_2_U0_U;
}

void example_example::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void example_example::thread_A_TREADY() {
    A_TREADY = proc_1_U0_A_TREADY.read();
}

void example_example::thread_B_TDATA() {
    B_TDATA = proc_2_U0_B_TDATA.read();
}

void example_example::thread_B_TDEST() {
    B_TDEST = proc_2_U0_B_TDEST.read();
}

void example_example::thread_B_TID() {
    B_TID = proc_2_U0_B_TID.read();
}

void example_example::thread_B_TKEEP() {
    B_TKEEP = proc_2_U0_B_TKEEP.read();
}

void example_example::thread_B_TLAST() {
    B_TLAST = proc_2_U0_B_TLAST.read();
}

void example_example::thread_B_TSTRB() {
    B_TSTRB = proc_2_U0_B_TSTRB.read();
}

void example_example::thread_B_TUSER() {
    B_TUSER = proc_2_U0_B_TUSER.read();
}

void example_example::thread_B_TVALID() {
    B_TVALID = proc_2_U0_B_TVALID.read();
}

void example_example::thread_ap_done() {
    ap_done = proc_2_U0_ap_done.read();
}

void example_example::thread_ap_idle() {
    ap_idle = (proc_1_U0_ap_idle.read() & proc_2_U0_ap_idle.read());
}

void example_example::thread_ap_ready() {
    ap_ready = proc_1_U0_ap_ready.read();
}

void example_example::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void example_example::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void example_example::thread_ap_sync_done() {
    ap_sync_done = proc_2_U0_ap_done.read();
}

void example_example::thread_ap_sync_ready() {
    ap_sync_ready = proc_1_U0_ap_ready.read();
}

void example_example::thread_proc_1_U0_ap_continue() {
    proc_1_U0_ap_continue = ap_const_logic_1;
}

void example_example::thread_proc_1_U0_ap_start() {
    proc_1_U0_ap_start = ap_start.read();
}

void example_example::thread_proc_2_U0_ap_continue() {
    proc_2_U0_ap_continue = ap_continue.read();
}

void example_example::thread_proc_2_U0_ap_start() {
    proc_2_U0_ap_start = start_for_proc_2_U0_empty_n.read();
}

void example_example::thread_proc_2_U0_start_full_n() {
    proc_2_U0_start_full_n = ap_const_logic_1;
}

void example_example::thread_proc_2_U0_start_write() {
    proc_2_U0_start_write = ap_const_logic_0;
}

void example_example::thread_start_for_proc_2_U0_din() {
    start_for_proc_2_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void example_example::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TDATA\" :  \"" << A_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TKEEP\" :  \"" << A_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TSTRB\" :  \"" << A_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TUSER\" :  \"" << A_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TLAST\" :  \"" << A_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TID\" :  \"" << A_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TDEST\" :  \"" << A_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TDATA\" :  \"" << B_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TKEEP\" :  \"" << B_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TSTRB\" :  \"" << B_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TUSER\" :  \"" << B_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TLAST\" :  \"" << B_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TID\" :  \"" << B_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TDEST\" :  \"" << B_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TVALID\" :  \"" << A_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_TREADY\" :  \"" << A_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TVALID\" :  \"" << B_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_TREADY\" :  \"" << B_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

