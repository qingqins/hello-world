// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _example_example_HH_
#define _example_example_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "example_proc_1.h"
#include "example_proc_2.h"
#include "example_fifo_w32_d8_A.h"
#include "example_start_for_proc_2_U0.h"
#include "example_example_control_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32>
struct example_example : public sc_module {
    // Port declarations 38
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<32> > A_TDATA;
    sc_in< sc_lv<4> > A_TKEEP;
    sc_in< sc_lv<4> > A_TSTRB;
    sc_in< sc_lv<2> > A_TUSER;
    sc_in< sc_lv<1> > A_TLAST;
    sc_in< sc_lv<5> > A_TID;
    sc_in< sc_lv<6> > A_TDEST;
    sc_out< sc_lv<32> > B_TDATA;
    sc_out< sc_lv<4> > B_TKEEP;
    sc_out< sc_lv<4> > B_TSTRB;
    sc_out< sc_lv<2> > B_TUSER;
    sc_out< sc_lv<1> > B_TLAST;
    sc_out< sc_lv<5> > B_TID;
    sc_out< sc_lv<6> > B_TDEST;
    sc_in< sc_logic > A_TVALID;
    sc_out< sc_logic > A_TREADY;
    sc_out< sc_logic > B_TVALID;
    sc_in< sc_logic > B_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    example_example(sc_module_name name);
    SC_HAS_PROCESS(example_example);

    ~example_example();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    example_example_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* example_control_s_axi_U;
    example_proc_1* proc_1_U0;
    example_proc_2* proc_2_U0;
    example_fifo_w32_d8_A* data_channel11_U;
    example_fifo_w32_d8_A* data_channel22_U;
    example_start_for_proc_2_U0* start_for_proc_2_U0_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_logic > proc_1_U0_ap_start;
    sc_signal< sc_logic > proc_1_U0_ap_done;
    sc_signal< sc_logic > proc_1_U0_ap_continue;
    sc_signal< sc_logic > proc_1_U0_ap_idle;
    sc_signal< sc_logic > proc_1_U0_ap_ready;
    sc_signal< sc_logic > proc_1_U0_start_out;
    sc_signal< sc_logic > proc_1_U0_start_write;
    sc_signal< sc_lv<32> > proc_1_U0_data_channel1_din;
    sc_signal< sc_logic > proc_1_U0_data_channel1_write;
    sc_signal< sc_lv<32> > proc_1_U0_data_channel2_din;
    sc_signal< sc_logic > proc_1_U0_data_channel2_write;
    sc_signal< sc_logic > proc_1_U0_A_TREADY;
    sc_signal< sc_logic > proc_2_U0_ap_start;
    sc_signal< sc_logic > proc_2_U0_ap_done;
    sc_signal< sc_logic > proc_2_U0_ap_continue;
    sc_signal< sc_logic > proc_2_U0_ap_idle;
    sc_signal< sc_logic > proc_2_U0_ap_ready;
    sc_signal< sc_logic > proc_2_U0_data_channel1_read;
    sc_signal< sc_logic > proc_2_U0_data_channel2_read;
    sc_signal< sc_lv<32> > proc_2_U0_B_TDATA;
    sc_signal< sc_logic > proc_2_U0_B_TVALID;
    sc_signal< sc_lv<4> > proc_2_U0_B_TKEEP;
    sc_signal< sc_lv<4> > proc_2_U0_B_TSTRB;
    sc_signal< sc_lv<2> > proc_2_U0_B_TUSER;
    sc_signal< sc_lv<1> > proc_2_U0_B_TLAST;
    sc_signal< sc_lv<5> > proc_2_U0_B_TID;
    sc_signal< sc_lv<6> > proc_2_U0_B_TDEST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > data_channel11_full_n;
    sc_signal< sc_lv<32> > data_channel11_dout;
    sc_signal< sc_logic > data_channel11_empty_n;
    sc_signal< sc_logic > data_channel22_full_n;
    sc_signal< sc_lv<32> > data_channel22_dout;
    sc_signal< sc_logic > data_channel22_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_proc_2_U0_din;
    sc_signal< sc_logic > start_for_proc_2_U0_full_n;
    sc_signal< sc_lv<1> > start_for_proc_2_U0_dout;
    sc_signal< sc_logic > start_for_proc_2_U0_empty_n;
    sc_signal< sc_logic > proc_2_U0_start_full_n;
    sc_signal< sc_logic > proc_2_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_A_TREADY();
    void thread_B_TDATA();
    void thread_B_TDEST();
    void thread_B_TID();
    void thread_B_TKEEP();
    void thread_B_TLAST();
    void thread_B_TSTRB();
    void thread_B_TUSER();
    void thread_B_TVALID();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_proc_1_U0_ap_continue();
    void thread_proc_1_U0_ap_start();
    void thread_proc_2_U0_ap_continue();
    void thread_proc_2_U0_ap_start();
    void thread_proc_2_U0_start_full_n();
    void thread_proc_2_U0_start_write();
    void thread_start_for_proc_2_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
