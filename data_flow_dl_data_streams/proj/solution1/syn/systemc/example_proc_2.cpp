// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "example_proc_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic example_proc_2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic example_proc_2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> example_proc_2::ap_ST_fsm_state1 = "1";
const sc_lv<3> example_proc_2::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> example_proc_2::ap_ST_fsm_state5 = "100";
const sc_lv<32> example_proc_2::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool example_proc_2::ap_const_boolean_1 = true;
const sc_lv<32> example_proc_2::ap_const_lv32_1 = "1";
const bool example_proc_2::ap_const_boolean_0 = false;
const sc_lv<1> example_proc_2::ap_const_lv1_0 = "0";
const sc_lv<1> example_proc_2::ap_const_lv1_1 = "1";
const sc_lv<4> example_proc_2::ap_const_lv4_0 = "0000";
const sc_lv<4> example_proc_2::ap_const_lv4_1 = "1";
const sc_lv<2> example_proc_2::ap_const_lv2_1 = "1";
const sc_lv<5> example_proc_2::ap_const_lv5_0 = "00000";
const sc_lv<6> example_proc_2::ap_const_lv6_1 = "1";
const sc_lv<4> example_proc_2::ap_const_lv4_A = "1010";
const sc_lv<32> example_proc_2::ap_const_lv32_2 = "10";

example_proc_2::example_proc_2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_B_V_data_V_U = new example_regslice_both<32>("regslice_both_B_V_data_V_U");
    regslice_both_B_V_data_V_U->ap_clk(ap_clk);
    regslice_both_B_V_data_V_U->ap_rst(ap_rst);
    regslice_both_B_V_data_V_U->data_in(B_TDATA_int);
    regslice_both_B_V_data_V_U->vld_in(B_TVALID_int);
    regslice_both_B_V_data_V_U->ack_in(B_TREADY_int);
    regslice_both_B_V_data_V_U->data_out(B_TDATA);
    regslice_both_B_V_data_V_U->vld_out(regslice_both_B_V_data_V_U_vld_out);
    regslice_both_B_V_data_V_U->ack_out(B_TREADY);
    regslice_both_B_V_data_V_U->apdone_blk(regslice_both_B_V_data_V_U_apdone_blk);
    regslice_both_B_V_keep_V_U = new example_regslice_both<4>("regslice_both_B_V_keep_V_U");
    regslice_both_B_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_B_V_keep_V_U->ap_rst(ap_rst);
    regslice_both_B_V_keep_V_U->data_in(ap_var_for_const0);
    regslice_both_B_V_keep_V_U->vld_in(B_TVALID_int);
    regslice_both_B_V_keep_V_U->ack_in(regslice_both_B_V_keep_V_U_ack_in_dummy);
    regslice_both_B_V_keep_V_U->data_out(B_TKEEP);
    regslice_both_B_V_keep_V_U->vld_out(regslice_both_B_V_keep_V_U_vld_out);
    regslice_both_B_V_keep_V_U->ack_out(B_TREADY);
    regslice_both_B_V_keep_V_U->apdone_blk(regslice_both_B_V_keep_V_U_apdone_blk);
    regslice_both_B_V_strb_V_U = new example_regslice_both<4>("regslice_both_B_V_strb_V_U");
    regslice_both_B_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_B_V_strb_V_U->ap_rst(ap_rst);
    regslice_both_B_V_strb_V_U->data_in(ap_var_for_const0);
    regslice_both_B_V_strb_V_U->vld_in(B_TVALID_int);
    regslice_both_B_V_strb_V_U->ack_in(regslice_both_B_V_strb_V_U_ack_in_dummy);
    regslice_both_B_V_strb_V_U->data_out(B_TSTRB);
    regslice_both_B_V_strb_V_U->vld_out(regslice_both_B_V_strb_V_U_vld_out);
    regslice_both_B_V_strb_V_U->ack_out(B_TREADY);
    regslice_both_B_V_strb_V_U->apdone_blk(regslice_both_B_V_strb_V_U_apdone_blk);
    regslice_both_B_V_user_V_U = new example_regslice_both<2>("regslice_both_B_V_user_V_U");
    regslice_both_B_V_user_V_U->ap_clk(ap_clk);
    regslice_both_B_V_user_V_U->ap_rst(ap_rst);
    regslice_both_B_V_user_V_U->data_in(ap_var_for_const1);
    regslice_both_B_V_user_V_U->vld_in(B_TVALID_int);
    regslice_both_B_V_user_V_U->ack_in(regslice_both_B_V_user_V_U_ack_in_dummy);
    regslice_both_B_V_user_V_U->data_out(B_TUSER);
    regslice_both_B_V_user_V_U->vld_out(regslice_both_B_V_user_V_U_vld_out);
    regslice_both_B_V_user_V_U->ack_out(B_TREADY);
    regslice_both_B_V_user_V_U->apdone_blk(regslice_both_B_V_user_V_U_apdone_blk);
    regslice_both_B_V_last_V_U = new example_regslice_both<1>("regslice_both_B_V_last_V_U");
    regslice_both_B_V_last_V_U->ap_clk(ap_clk);
    regslice_both_B_V_last_V_U->ap_rst(ap_rst);
    regslice_both_B_V_last_V_U->data_in(ap_var_for_const2);
    regslice_both_B_V_last_V_U->vld_in(B_TVALID_int);
    regslice_both_B_V_last_V_U->ack_in(regslice_both_B_V_last_V_U_ack_in_dummy);
    regslice_both_B_V_last_V_U->data_out(B_TLAST);
    regslice_both_B_V_last_V_U->vld_out(regslice_both_B_V_last_V_U_vld_out);
    regslice_both_B_V_last_V_U->ack_out(B_TREADY);
    regslice_both_B_V_last_V_U->apdone_blk(regslice_both_B_V_last_V_U_apdone_blk);
    regslice_both_B_V_id_V_U = new example_regslice_both<5>("regslice_both_B_V_id_V_U");
    regslice_both_B_V_id_V_U->ap_clk(ap_clk);
    regslice_both_B_V_id_V_U->ap_rst(ap_rst);
    regslice_both_B_V_id_V_U->data_in(ap_var_for_const3);
    regslice_both_B_V_id_V_U->vld_in(B_TVALID_int);
    regslice_both_B_V_id_V_U->ack_in(regslice_both_B_V_id_V_U_ack_in_dummy);
    regslice_both_B_V_id_V_U->data_out(B_TID);
    regslice_both_B_V_id_V_U->vld_out(regslice_both_B_V_id_V_U_vld_out);
    regslice_both_B_V_id_V_U->ack_out(B_TREADY);
    regslice_both_B_V_id_V_U->apdone_blk(regslice_both_B_V_id_V_U_apdone_blk);
    regslice_both_B_V_dest_V_U = new example_regslice_both<6>("regslice_both_B_V_dest_V_U");
    regslice_both_B_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_B_V_dest_V_U->ap_rst(ap_rst);
    regslice_both_B_V_dest_V_U->data_in(ap_var_for_const4);
    regslice_both_B_V_dest_V_U->vld_in(B_TVALID_int);
    regslice_both_B_V_dest_V_U->ack_in(regslice_both_B_V_dest_V_U_ack_in_dummy);
    regslice_both_B_V_dest_V_U->data_out(B_TDEST);
    regslice_both_B_V_dest_V_U->vld_out(regslice_both_B_V_dest_V_U_vld_out);
    regslice_both_B_V_dest_V_U->ack_out(B_TREADY);
    regslice_both_B_V_dest_V_U->apdone_blk(regslice_both_B_V_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_B_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln38_reg_133_pp0_iter1_reg );
    sensitive << ( B_TREADY_int );

    SC_METHOD(thread_B_TDATA_int);
    sensitive << ( data_channel1_dout );
    sensitive << ( data_channel2_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_B_TVALID);
    sensitive << ( regslice_both_B_V_data_V_U_vld_out );

    SC_METHOD(thread_B_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( data_channel1_empty_n );
    sensitive << ( data_channel2_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln38_reg_133 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( data_channel1_empty_n );
    sensitive << ( data_channel2_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( data_channel1_empty_n );
    sensitive << ( data_channel2_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( B_TREADY_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( data_channel1_empty_n );
    sensitive << ( data_channel2_empty_n );
    sensitive << ( icmp_ln38_reg_133 );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( icmp_ln38_reg_133_pp0_iter1_reg );
    sensitive << ( B_TREADY_int );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln38_fu_114_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_B_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_B_V_data_V_U_apdone_blk );

    SC_METHOD(thread_data_channel1_blk_n);
    sensitive << ( data_channel1_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln38_reg_133 );

    SC_METHOD(thread_data_channel1_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_data_channel2_blk_n);
    sensitive << ( data_channel2_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln38_reg_133 );

    SC_METHOD(thread_data_channel2_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln38_reg_133 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_1_fu_120_p2);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_icmp_ln38_fu_114_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_103 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln38_fu_114_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_B_V_data_V_U_apdone_blk );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "example_proc_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_channel1_dout, "(port)data_channel1_dout");
    sc_trace(mVcdFile, data_channel1_empty_n, "(port)data_channel1_empty_n");
    sc_trace(mVcdFile, data_channel1_read, "(port)data_channel1_read");
    sc_trace(mVcdFile, data_channel2_dout, "(port)data_channel2_dout");
    sc_trace(mVcdFile, data_channel2_empty_n, "(port)data_channel2_empty_n");
    sc_trace(mVcdFile, data_channel2_read, "(port)data_channel2_read");
    sc_trace(mVcdFile, B_TDATA, "(port)B_TDATA");
    sc_trace(mVcdFile, B_TVALID, "(port)B_TVALID");
    sc_trace(mVcdFile, B_TREADY, "(port)B_TREADY");
    sc_trace(mVcdFile, B_TKEEP, "(port)B_TKEEP");
    sc_trace(mVcdFile, B_TSTRB, "(port)B_TSTRB");
    sc_trace(mVcdFile, B_TUSER, "(port)B_TUSER");
    sc_trace(mVcdFile, B_TLAST, "(port)B_TLAST");
    sc_trace(mVcdFile, B_TID, "(port)B_TID");
    sc_trace(mVcdFile, B_TDEST, "(port)B_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, data_channel1_blk_n, "data_channel1_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln38_reg_133, "icmp_ln38_reg_133");
    sc_trace(mVcdFile, data_channel2_blk_n, "data_channel2_blk_n");
    sc_trace(mVcdFile, B_TDATA_blk_n, "B_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln38_reg_133_pp0_iter1_reg, "icmp_ln38_reg_133_pp0_iter1_reg");
    sc_trace(mVcdFile, i_reg_103, "i_reg_103");
    sc_trace(mVcdFile, icmp_ln38_fu_114_p2, "icmp_ln38_fu_114_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_1_fu_120_p2, "i_1_fu_120_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, regslice_both_B_V_data_V_U_apdone_blk, "regslice_both_B_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, B_TDATA_int, "B_TDATA_int");
    sc_trace(mVcdFile, B_TVALID_int, "B_TVALID_int");
    sc_trace(mVcdFile, B_TREADY_int, "B_TREADY_int");
    sc_trace(mVcdFile, regslice_both_B_V_data_V_U_vld_out, "regslice_both_B_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_B_V_keep_V_U_apdone_blk, "regslice_both_B_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_B_V_keep_V_U_ack_in_dummy, "regslice_both_B_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_B_V_keep_V_U_vld_out, "regslice_both_B_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_B_V_strb_V_U_apdone_blk, "regslice_both_B_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_B_V_strb_V_U_ack_in_dummy, "regslice_both_B_V_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_B_V_strb_V_U_vld_out, "regslice_both_B_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_B_V_user_V_U_apdone_blk, "regslice_both_B_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_B_V_user_V_U_ack_in_dummy, "regslice_both_B_V_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_B_V_user_V_U_vld_out, "regslice_both_B_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_B_V_last_V_U_apdone_blk, "regslice_both_B_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_B_V_last_V_U_ack_in_dummy, "regslice_both_B_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_B_V_last_V_U_vld_out, "regslice_both_B_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_B_V_id_V_U_apdone_blk, "regslice_both_B_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_B_V_id_V_U_ack_in_dummy, "regslice_both_B_V_id_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_B_V_id_V_U_vld_out, "regslice_both_B_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_B_V_dest_V_U_apdone_blk, "regslice_both_B_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_B_V_dest_V_U_ack_in_dummy, "regslice_both_B_V_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_B_V_dest_V_U_vld_out, "regslice_both_B_V_dest_V_U_vld_out");
#endif

    }
}

example_proc_2::~example_proc_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_B_V_data_V_U;
    delete regslice_both_B_V_keep_V_U;
    delete regslice_both_B_V_strb_V_U;
    delete regslice_both_B_V_user_V_U;
    delete regslice_both_B_V_last_V_U;
    delete regslice_both_B_V_id_V_U;
    delete regslice_both_B_V_dest_V_U;
}

void example_proc_2::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void example_proc_2::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv4_1;
}

void example_proc_2::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv2_1;
}

void example_proc_2::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv5_0;
}

void example_proc_2::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv6_1;
}

void example_proc_2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    esl_seteq<1,1,1>(regslice_both_B_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln38_fu_114_p2.read()))) {
        i_reg_103 = i_1_fu_120_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_reg_103 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln38_reg_133 = icmp_ln38_fu_114_p2.read();
        icmp_ln38_reg_133_pp0_iter1_reg = icmp_ln38_reg_133.read();
    }
}

void example_proc_2::thread_B_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln38_reg_133_pp0_iter1_reg.read())))) {
        B_TDATA_blk_n = B_TREADY_int.read();
    } else {
        B_TDATA_blk_n = ap_const_logic_1;
    }
}

void example_proc_2::thread_B_TDATA_int() {
    B_TDATA_int = (!data_channel1_dout.read().is_01() || !data_channel2_dout.read().is_01())? sc_lv<32>(): (sc_biguint<32>(data_channel1_dout.read()) + sc_biguint<32>(data_channel2_dout.read()));
}

void example_proc_2::thread_B_TVALID() {
    B_TVALID = regslice_both_B_V_data_V_U_vld_out.read();
}

void example_proc_2::thread_B_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        B_TVALID_int = ap_const_logic_1;
    } else {
        B_TVALID_int = ap_const_logic_0;
    }
}

void example_proc_2::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void example_proc_2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void example_proc_2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void example_proc_2::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void example_proc_2::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, data_channel2_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, data_channel1_empty_n.read()))));
}

void example_proc_2::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, data_channel2_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, data_channel1_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void example_proc_2::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, data_channel2_empty_n.read())) || 
   (esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, data_channel1_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void example_proc_2::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void example_proc_2::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void example_proc_2::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, B_TREADY_int.read()));
}

void example_proc_2::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_channel2_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, data_channel1_empty_n.read())));
}

void example_proc_2::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln38_reg_133_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, B_TREADY_int.read()));
}

void example_proc_2::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void example_proc_2::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln38_fu_114_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void example_proc_2::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_B_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void example_proc_2::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void example_proc_2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void example_proc_2::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void example_proc_2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(regslice_both_B_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void example_proc_2::thread_data_channel1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0))) {
        data_channel1_blk_n = data_channel1_empty_n.read();
    } else {
        data_channel1_blk_n = ap_const_logic_1;
    }
}

void example_proc_2::thread_data_channel1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_channel1_read = ap_const_logic_1;
    } else {
        data_channel1_read = ap_const_logic_0;
    }
}

void example_proc_2::thread_data_channel2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0))) {
        data_channel2_blk_n = data_channel2_empty_n.read();
    } else {
        data_channel2_blk_n = ap_const_logic_1;
    }
}

void example_proc_2::thread_data_channel2_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln38_reg_133.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_channel2_read = ap_const_logic_1;
    } else {
        data_channel2_read = ap_const_logic_0;
    }
}

void example_proc_2::thread_i_1_fu_120_p2() {
    i_1_fu_120_p2 = (!i_reg_103.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_103.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void example_proc_2::thread_icmp_ln38_fu_114_p2() {
    icmp_ln38_fu_114_p2 = (!i_reg_103.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_103.read() == ap_const_lv4_A);
}

void example_proc_2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln38_fu_114_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln38_fu_114_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_both_B_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

