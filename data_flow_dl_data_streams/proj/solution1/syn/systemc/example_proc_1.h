// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _example_proc_1_HH_
#define _example_proc_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct example_proc_1 : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<32> > data_channel1_din;
    sc_in< sc_logic > data_channel1_full_n;
    sc_out< sc_logic > data_channel1_write;
    sc_out< sc_lv<32> > data_channel2_din;
    sc_in< sc_logic > data_channel2_full_n;
    sc_out< sc_logic > data_channel2_write;
    sc_in< sc_lv<32> > A_TDATA;
    sc_in< sc_logic > A_TVALID;
    sc_out< sc_logic > A_TREADY;
    sc_in< sc_lv<4> > A_TKEEP;
    sc_in< sc_lv<4> > A_TSTRB;
    sc_in< sc_lv<2> > A_TUSER;
    sc_in< sc_lv<1> > A_TLAST;
    sc_in< sc_lv<5> > A_TID;
    sc_in< sc_lv<6> > A_TDEST;


    // Module declarations
    example_proc_1(sc_module_name name);
    SC_HAS_PROCESS(example_proc_1);

    ~example_proc_1();

    sc_trace_file* mVcdFile;

    example_regslice_both<32>* regslice_both_A_V_data_V_U;
    example_regslice_both<4>* regslice_both_A_V_keep_V_U;
    example_regslice_both<4>* regslice_both_A_V_strb_V_U;
    example_regslice_both<2>* regslice_both_A_V_user_V_U;
    example_regslice_both<1>* regslice_both_A_V_last_V_U;
    example_regslice_both<5>* regslice_both_A_V_id_V_U;
    example_regslice_both<6>* regslice_both_A_V_dest_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > data_channel1_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln25_reg_147;
    sc_signal< sc_logic > data_channel2_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln30_reg_162;
    sc_signal< sc_logic > A_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln25_fu_119_p2;
    sc_signal< sc_lv<32> > access03_reg_84;
    sc_signal< sc_lv<4> > i_reg_97;
    sc_signal< sc_lv<4> > i_3_reg_108;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > i_2_fu_125_p2;
    sc_signal< sc_lv<32> > tmp_data_V_reg_156;
    sc_signal< sc_lv<1> > icmp_ln30_fu_135_p2;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<4> > i_4_fu_141_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > regslice_both_A_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<32> > A_TDATA_int;
    sc_signal< sc_logic > A_TVALID_int;
    sc_signal< sc_logic > A_TREADY_int;
    sc_signal< sc_logic > regslice_both_A_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_A_V_keep_V_U_apdone_blk;
    sc_signal< sc_lv<4> > A_TKEEP_int;
    sc_signal< sc_logic > regslice_both_A_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_A_V_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_A_V_strb_V_U_apdone_blk;
    sc_signal< sc_lv<4> > A_TSTRB_int;
    sc_signal< sc_logic > regslice_both_A_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_A_V_strb_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_A_V_user_V_U_apdone_blk;
    sc_signal< sc_lv<2> > A_TUSER_int;
    sc_signal< sc_logic > regslice_both_A_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_A_V_user_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_A_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > A_TLAST_int;
    sc_signal< sc_logic > regslice_both_A_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_A_V_last_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_A_V_id_V_U_apdone_blk;
    sc_signal< sc_lv<5> > A_TID_int;
    sc_signal< sc_logic > regslice_both_A_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_A_V_id_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_A_V_dest_V_U_apdone_blk;
    sc_signal< sc_lv<6> > A_TDEST_int;
    sc_signal< sc_logic > regslice_both_A_V_dest_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_A_V_dest_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const sc_lv<5> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_TDATA_blk_n();
    void thread_A_TREADY();
    void thread_A_TREADY_int();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state5_pp1_stage0_iter0();
    void thread_ap_block_state6_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_data_channel1_blk_n();
    void thread_data_channel1_din();
    void thread_data_channel1_write();
    void thread_data_channel2_blk_n();
    void thread_data_channel2_din();
    void thread_data_channel2_write();
    void thread_i_2_fu_125_p2();
    void thread_i_4_fu_141_p2();
    void thread_icmp_ln25_fu_119_p2();
    void thread_icmp_ln30_fu_135_p2();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
